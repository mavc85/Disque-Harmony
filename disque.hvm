{
  "labels": {
    "__end__": 447
  },
  "modules": {
    "lists": {
      "file": "C:\\Users\\mavc2\\AppData\\Roaming\\Python\\Python38\\site-packages\\harmony_model_checker\\modules\\lists.hny",
      "lines": [
        "# return s[b:e]",
        "def subseq(s, b, e) returns result:",
        "    result = [ s[x] for x in {b..e-1} ]",
        "",
        "def append(s, e) returns result:",
        "    result = s + [e,]",
        "",
        "def head(s) returns result:",
        "    result = s[0]",
        "",
        "def tail(s) returns result:",
        "    result = s",
        "    del result[0]",
        "",
        "# convert values of a dictionary into a list",
        "def values(d) returns result:",
        "    result = [ v for _:v in d ]",
        "",
        "# like Python .items()",
        "def items(d) returns result:",
        "    result = [ (k, v) for k:v in d ]",
        "",
        "# quicksort of a list",
        "def qsort(a) returns sorted_list:",
        "    if a == []:",
        "        sorted_list = []",
        "    else:",
        "        let (pivot, rest) = head(a), tail(a)",
        "        let lower = [ v for v in rest where v < pivot ]",
        "        let higher = [ v for v in rest where v >= pivot ]:",
        "            sorted_list = qsort(lower) + [pivot,] + qsort(higher)",
        "",
        "# like Python index()",
        "def index(d, e) returns i:",
        "    i = 0",
        "    while d[i] != e:",
        "        i += 1",
        "",
        "# like Python startswith (only defined for strings)",
        "def startswith(d, prefix) returns result:",
        "    result = (len(prefix) <= len(d)) and all(d[i] == prefix[i] for i in { 0 .. len(prefix) - 1 })",
        "",
        "# left fold.  Compute f(f(f(z, d[0]), d[1]), d[2] ...)",
        "def foldl(d, f, z) returns result:",
        "    result = z",
        "    for e in d:",
        "        result = f(result, e)",
        "",
        "# right fold.  Compute f(d[0], f(d[1], ..., f(d[n-1], z)))",
        "def foldr(d, f, z) returns result:",
        "    result = z if len d == 0 else f(d[0], foldr(tail(d), f, z))",
        "",
        "# Python functools reduce operator",
        "def reduce(f, d, z) returns result:",
        "    result = foldl(d, f, z)",
        "",
        "# Return a permutation of set s",
        "def permuted(s) returns perm:",
        "    perm = []",
        "    var c = s",
        "    while c != {}:",
        "        let e = choose c:",
        "            perm += [ e, ]",
        "            c -= { e }",
        "",
        "# Return a list of elements satisfying the condition",
        "def filter(cond, s) returns t:",
        "    t = [ e for e in s where cond(e) ]",
        "",
        "# Return a list of elements mapped by f",
        "def map(f, s) returns t:",
        "    t = [ f(e) for e in s ]"
      ],
      "identifiers": {
        "s": "local-const",
        "b": "local-const",
        "e": "local-const",
        "x": "local-const",
        "d": "local-const",
        "v": "local-const",
        "k": "local-const",
        "a": "local-const",
        "pivot": "local-const",
        "rest": "local-const",
        "lower": "local-const",
        "higher": "local-const",
        "prefix": "local-const",
        "i": "local-const",
        "f": "local-const",
        "z": "local-const",
        "c": "local-var",
        "cond": "local-const",
        "this": "local-var",
        "subseq": "constant",
        "append": "constant",
        "head": "constant",
        "tail": "constant",
        "values": "constant",
        "items": "constant",
        "qsort": "constant",
        "index": "constant",
        "startswith": "constant",
        "foldl": "constant",
        "foldr": "constant",
        "reduce": "constant",
        "permuted": "constant",
        "filter": "constant",
        "map": "constant",
        "___": "___"
      }
    },
    "__main__": {
      "file": "disque.hny",
      "lines": [
        "import lists",
        "",
        "# def Disque() returns d:",
        "#   d = []",
        "",
        "# # def insert(d,v):",
        "# #   d + [v]",
        "",
        "",
        "# # def delete(d):",
        "",
        "",
        "# # def next(d):",
        "",
        "d = [1,2,3]",
        "",
        "d = [4,] + d",
        "",
        "print(d)",
        ""
      ],
      "identifiers": {
        "lists": "module",
        "this": "local-var",
        "d": "global",
        "___": "___"
      }
    }
  },
  "code": [
    { "op": "Frame", "name": "__init__", "args": "()" },
    { "op": "Jump", "pc": "429" },
    { "op": "Frame", "name": "subseq", "args": "(s, b, e)" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu3" },
    { "op": "LoadVar", "value": "b" },
    { "op": "DelVar", "value": "b" },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": ".." },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "x" },
    { "op": "JumpCond", "pc": "26", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu3" },
    { "op": "DelVar", "value": "$accu3" },
    { "op": "LoadVar", "value": "s" },
    { "op": "LoadVar", "value": "x" },
    { "op": "DelVar", "value": "x" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu3" },
    { "op": "Jump", "pc": "14" },
    { "op": "DelVar", "value": "s" },
    { "op": "DelVar", "value": "x" },
    { "op": "LoadVar", "value": "$accu3" },
    { "op": "DelVar", "value": "$accu3" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "429" },
    { "op": "Frame", "name": "append", "args": "(s, e)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "429" },
    { "op": "Frame", "name": "head", "args": "s" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "429" },
    { "op": "Frame", "name": "tail", "args": "s" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Push", "value": { "type": "address", "func": { "type": "pc", "value": "-2" }, "args": [{ "type": "atom", "value": "result" }] } },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "AddArg" },
    { "op": "DelVar" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "429" },
    { "op": "Frame", "name": "values", "args": "d" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu52" },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "key": "_", "value": "v" },
    { "op": "DelVar", "value": "_" },
    { "op": "JumpCond", "pc": "83", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu52" },
    { "op": "DelVar", "value": "$accu52" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu52" },
    { "op": "Jump", "pc": "73" },
    { "op": "DelVar", "value": "v" },
    { "op": "LoadVar", "value": "$accu52" },
    { "op": "DelVar", "value": "$accu52" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "429" },
    { "op": "Frame", "name": "items", "args": "d" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu68" },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "key": "k", "value": "v" },
    { "op": "JumpCond", "pc": "110", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu68" },
    { "op": "DelVar", "value": "$accu68" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "k" },
    { "op": "DelVar", "value": "k" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu68" },
    { "op": "Jump", "pc": "96" },
    { "op": "DelVar", "value": "k" },
    { "op": "DelVar", "value": "v" },
    { "op": "LoadVar", "value": "$accu68" },
    { "op": "DelVar", "value": "$accu68" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "429" },
    { "op": "Frame", "name": "qsort", "args": "a" },
    { "op": "LoadVar", "value": "a" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "126", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "a" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "sorted_list" },
    { "op": "Jump", "pc": "192" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "a" },
    { "op": "Apply", "value": { "type": "pc", "value": "45" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "a" },
    { "op": "DelVar", "value": "a" },
    { "op": "Apply", "value": { "type": "pc", "value": "55" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "(pivot, rest)" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu103" },
    { "op": "LoadVar", "value": "rest" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "DelVar", "value": "v" },
    { "op": "Cut", "value": "v" },
    { "op": "JumpCond", "pc": "153", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "v" },
    { "op": "LoadVar", "value": "pivot" },
    { "op": "Nary", "arity": 2, "value": "<" },
    { "op": "JumpCond", "pc": "139", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu103" },
    { "op": "DelVar", "value": "$accu103" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu103" },
    { "op": "Jump", "pc": "139" },
    { "op": "DelVar", "value": "v" },
    { "op": "LoadVar", "value": "$accu103" },
    { "op": "DelVar", "value": "$accu103" },
    { "op": "StoreVar", "value": "lower" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu120" },
    { "op": "LoadVar", "value": "rest" },
    { "op": "DelVar", "value": "rest" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "DelVar", "value": "v" },
    { "op": "Cut", "value": "v" },
    { "op": "JumpCond", "pc": "176", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "v" },
    { "op": "LoadVar", "value": "pivot" },
    { "op": "Nary", "arity": 2, "value": ">=" },
    { "op": "JumpCond", "pc": "162", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu120" },
    { "op": "DelVar", "value": "$accu120" },
    { "op": "LoadVar", "value": "v" },
    { "op": "DelVar", "value": "v" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu120" },
    { "op": "Jump", "pc": "162" },
    { "op": "DelVar", "value": "v" },
    { "op": "LoadVar", "value": "$accu120" },
    { "op": "DelVar", "value": "$accu120" },
    { "op": "StoreVar", "value": "higher" },
    { "op": "LoadVar", "value": "lower" },
    { "op": "DelVar", "value": "lower" },
    { "op": "Apply", "value": { "type": "pc", "value": "117" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "pivot" },
    { "op": "DelVar", "value": "pivot" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "higher" },
    { "op": "DelVar", "value": "higher" },
    { "op": "Apply", "value": { "type": "pc", "value": "117" } },
    { "op": "Nary", "arity": 3, "value": "+" },
    { "op": "StoreVar", "value": "sorted_list" },
    { "op": "Return", "result": "sorted_list" },
    { "op": "DelVar", "value": "sorted_list" },
    { "op": "Jump", "pc": "429" },
    { "op": "Frame", "name": "index", "args": "(d, e)" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "StoreVar", "value": "i" },
    { "op": "LoadVar", "value": "d" },
    { "op": "LoadVar", "value": "i" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "LoadVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "JumpCond", "pc": "211", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "i" },
    { "op": "Jump", "pc": "198" },
    { "op": "DelVar", "value": "d" },
    { "op": "DelVar", "value": "e" },
    { "op": "Return", "result": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Jump", "pc": "429" },
    { "op": "Frame", "name": "startswith", "args": "(d, prefix)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "prefix" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Nary", "arity": 2, "value": "<=" },
    { "op": "JumpCond", "pc": "257", "cond": { "type": "bool", "value": "False" } },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu172" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "LoadVar", "value": "prefix" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "Nary", "arity": 2, "value": ".." },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "i" },
    { "op": "JumpCond", "pc": "250", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu172" },
    { "op": "DelVar", "value": "$accu172" },
    { "op": "LoadVar", "value": "d" },
    { "op": "LoadVar", "value": "i" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "LoadVar", "value": "prefix" },
    { "op": "LoadVar", "value": "i" },
    { "op": "DelVar", "value": "i" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu172" },
    { "op": "Jump", "pc": "233" },
    { "op": "DelVar", "value": "d" },
    { "op": "DelVar", "value": "i" },
    { "op": "DelVar", "value": "prefix" },
    { "op": "LoadVar", "value": "$accu172" },
    { "op": "DelVar", "value": "$accu172" },
    { "op": "Nary", "arity": 1, "value": "all" },
    { "op": "Jump", "pc": "260" },
    { "op": "DelVar", "value": "d" },
    { "op": "DelVar", "value": "prefix" },
    { "op": "Push", "value": { "type": "bool", "value": "False" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "429" },
    { "op": "Frame", "name": "foldl", "args": "(d, f, z)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "z" },
    { "op": "DelVar", "value": "z" },
    { "op": "StoreVar", "value": "result" },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "e" },
    { "op": "JumpCond", "pc": "285", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "f" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "result" },
    { "op": "DelVar", "value": "result" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Jump", "pc": "271" },
    { "op": "DelVar", "value": "e" },
    { "op": "DelVar", "value": "f" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "429" },
    { "op": "Frame", "name": "foldr", "args": "(d, f, z)" },
    { "op": "DelVar", "value": "result" },
    { "op": "LoadVar", "value": "d" },
    { "op": "Nary", "arity": 1, "value": "len" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "==" },
    { "op": "JumpCond", "pc": "301", "cond": { "type": "bool", "value": "False" } },
    { "op": "DelVar", "value": "d" },
    { "op": "DelVar", "value": "f" },
    { "op": "LoadVar", "value": "z" },
    { "op": "DelVar", "value": "z" },
    { "op": "Jump", "pc": "323" },
    { "op": "LoadVar", "value": "f" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "d" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Apply", "value": { "type": "pc", "value": "55" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "f" },
    { "op": "DelVar", "value": "f" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "z" },
    { "op": "DelVar", "value": "z" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "289" } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "429" },
    { "op": "Frame", "name": "reduce", "args": "(f, d, z)" },
    { "op": "DelVar", "value": "result" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "d" },
    { "op": "DelVar", "value": "d" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "f" },
    { "op": "DelVar", "value": "f" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "LoadVar", "value": "z" },
    { "op": "DelVar", "value": "z" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Apply", "value": { "type": "pc", "value": "263" } },
    { "op": "StoreVar", "value": "result" },
    { "op": "Return", "result": "result" },
    { "op": "Jump", "pc": "429" },
    { "op": "Frame", "name": "permuted", "args": "s" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "perm" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "StoreVar", "value": "c" },
    { "op": "LoadVar", "value": "c" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "Nary", "arity": 2, "value": "!=" },
    { "op": "JumpCond", "pc": "371", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "c" },
    { "op": "Choose" },
    { "op": "StoreVar", "value": "e" },
    { "op": "LoadVar", "value": "perm" },
    { "op": "DelVar", "value": "perm" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "LoadVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "StoreVar", "value": "perm" },
    { "op": "LoadVar", "value": "c" },
    { "op": "DelVar", "value": "c" },
    { "op": "Push", "value": { "type": "set", "value": [] } },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "SetAdd" },
    { "op": "Nary", "arity": 2, "value": "-" },
    { "op": "StoreVar", "value": "c" },
    { "op": "Jump", "pc": "348" },
    { "op": "DelVar", "value": "c" },
    { "op": "Return", "result": "perm" },
    { "op": "DelVar", "value": "perm" },
    { "op": "Jump", "pc": "429" },
    { "op": "Frame", "name": "filter", "args": "(cond, s)" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu292" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "DelVar", "value": "e" },
    { "op": "Cut", "value": "e" },
    { "op": "JumpCond", "pc": "396", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "cond" },
    { "op": "LoadVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "JumpCond", "pc": "381", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu292" },
    { "op": "DelVar", "value": "$accu292" },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu292" },
    { "op": "Jump", "pc": "381" },
    { "op": "DelVar", "value": "cond" },
    { "op": "DelVar", "value": "e" },
    { "op": "LoadVar", "value": "$accu292" },
    { "op": "DelVar", "value": "$accu292" },
    { "op": "StoreVar", "value": "t" },
    { "op": "Return", "result": "t" },
    { "op": "DelVar", "value": "t" },
    { "op": "Jump", "pc": "429" },
    { "op": "Frame", "name": "map", "args": "(f, s)" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "StoreVar", "value": "$accu313" },
    { "op": "LoadVar", "value": "s" },
    { "op": "DelVar", "value": "s" },
    { "op": "Push", "value": { "type": "int", "value": 0 } },
    { "op": "Cut", "value": "e" },
    { "op": "JumpCond", "pc": "422", "cond": { "type": "bool", "value": "False" } },
    { "op": "LoadVar", "value": "$accu313" },
    { "op": "DelVar", "value": "$accu313" },
    { "op": "LoadVar", "value": "f" },
    { "op": "LoadVar", "value": "e" },
    { "op": "DelVar", "value": "e" },
    { "op": "Nary", "arity": 2, "value": "Closure" },
    { "op": "Load" },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "StoreVar", "value": "$accu313" },
    { "op": "Jump", "pc": "410" },
    { "op": "DelVar", "value": "e" },
    { "op": "DelVar", "value": "f" },
    { "op": "LoadVar", "value": "$accu313" },
    { "op": "DelVar", "value": "$accu313" },
    { "op": "StoreVar", "value": "t" },
    { "op": "Return", "result": "t" },
    { "op": "DelVar", "value": "t" },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 1 } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "int", "value": 2 } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Push", "value": { "type": "int", "value": 3 } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Store", "value": [{ "type": "atom", "value": "d"}] },
    { "op": "Push", "value": { "type": "list", "value": [] } },
    { "op": "Push", "value": { "type": "int", "value": 4 } },
    { "op": "Nary", "arity": 2, "value": "ListAdd" },
    { "op": "Load", "value": [{ "type": "atom", "value": "d"}] },
    { "op": "Nary", "arity": 2, "value": "+" },
    { "op": "Store", "value": [{ "type": "atom", "value": "d"}] },
    { "op": "Load", "value": [{ "type": "atom", "value": "d"}] },
    { "op": "Print" },
    { "op": "Return", "result": "result", "default": { "type": "address" } },
    { "op": "DelVar", "value": "result" }
  ],
  "pretty": [
    ["Frame __init__()","start of method __init__"],
    ["Jump 429","jump over method definition: set program counter to 429"],
    ["Frame subseq(s, b, e)","start of method subseq"],
    ["DelVar result","delete method variable result"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu3","initialize accumulator for list comprehension: pop a value and store in $accu3"],
    ["LoadVar b","push the value of b"],
    ["DelVar b","delete method variable b"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary ..","pop 2 values and push the result of applying .."],
    ["Push 0","push constant 0"],
    ["Cut(x)","get next element and assign to x; push False or True depending on success"],
    ["JumpCond False 26","check if loop is done: pop a value and jump to 26 if the value is False"],
    ["LoadVar $accu3","load accumulator: push the value of $accu3"],
    ["DelVar $accu3","delete method variable $accu3"],
    ["LoadVar s","push the value of s"],
    ["LoadVar x","push the value of x"],
    ["DelVar x","delete method variable x"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu3","update accumulator: pop a value and store in $accu3"],
    ["Jump 14","set program counter to 14"],
    ["DelVar s","delete method variable s"],
    ["DelVar x","delete method variable x"],
    ["LoadVar $accu3","load final accumulator result: push the value of $accu3"],
    ["DelVar $accu3","delete method variable $accu3"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 429","jump over method definition: set program counter to 429"],
    ["Frame append(s, e)","start of method append"],
    ["DelVar result","delete method variable result"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 429","jump over method definition: set program counter to 429"],
    ["Frame head(s)","start of method head"],
    ["DelVar result","delete method variable result"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push 0","push constant 0"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 429","jump over method definition: set program counter to 429"],
    ["Frame tail(s)","start of method tail"],
    ["DelVar result","delete method variable result"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["StoreVar result","pop a value and store in result"],
    ["Push ?result","push constant ?result"],
    ["Push 0","push constant 0"],
    ["2-ary AddArg","pop 2 values and push the result of applying AddArg"],
    ["DelVar [result]","pop an address of a method variable and delete that variable"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 429","jump over method definition: set program counter to 429"],
    ["Frame values(d)","start of method values"],
    ["DelVar result","delete method variable result"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu52","initialize accumulator for list comprehension: pop a value and store in $accu52"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["Push 0","push constant 0"],
    ["Cut(_, v)","get next element and assign to _:v; push False or True depending on success"],
    ["DelVar _","delete method variable _"],
    ["JumpCond False 83","check if loop is done: pop a value and jump to 83 if the value is False"],
    ["LoadVar $accu52","load accumulator: push the value of $accu52"],
    ["DelVar $accu52","delete method variable $accu52"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu52","update accumulator: pop a value and store in $accu52"],
    ["Jump 73","set program counter to 73"],
    ["DelVar v","delete method variable v"],
    ["LoadVar $accu52","load final accumulator result: push the value of $accu52"],
    ["DelVar $accu52","delete method variable $accu52"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 429","jump over method definition: set program counter to 429"],
    ["Frame items(d)","start of method items"],
    ["DelVar result","delete method variable result"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu68","initialize accumulator for list comprehension: pop a value and store in $accu68"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["Push 0","push constant 0"],
    ["Cut(k, v)","get next element and assign to k:v; push False or True depending on success"],
    ["JumpCond False 110","check if loop is done: pop a value and jump to 110 if the value is False"],
    ["LoadVar $accu68","load accumulator: push the value of $accu68"],
    ["DelVar $accu68","delete method variable $accu68"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar k","push the value of k"],
    ["DelVar k","delete method variable k"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu68","update accumulator: pop a value and store in $accu68"],
    ["Jump 96","set program counter to 96"],
    ["DelVar k","delete method variable k"],
    ["DelVar v","delete method variable v"],
    ["LoadVar $accu68","load final accumulator result: push the value of $accu68"],
    ["DelVar $accu68","delete method variable $accu68"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 429","jump over method definition: set program counter to 429"],
    ["Frame qsort(a)","start of method qsort"],
    ["LoadVar a","push the value of a"],
    ["Push ()","push constant ()"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 126","pop a value and jump to 126 if the value is False"],
    ["DelVar a","delete method variable a"],
    ["Push ()","push constant ()"],
    ["StoreVar sorted_list","pop a value and store in sorted_list"],
    ["Jump 192","set program counter to 192"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar a","push the value of a"],
    ["Apply PC(45)","call method PC(45)"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar a","push the value of a"],
    ["DelVar a","delete method variable a"],
    ["Apply PC(55)","call method PC(55)"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar (pivot, rest)","pop a value and store in (pivot, rest)"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu103","initialize accumulator for list comprehension: pop a value and store in $accu103"],
    ["LoadVar rest","push the value of rest"],
    ["Push 0","push constant 0"],
    ["DelVar v","delete method variable v"],
    ["Cut(v)","get next element and assign to v; push False or True depending on success"],
    ["JumpCond False 153","check if loop is done: pop a value and jump to 153 if the value is False"],
    ["LoadVar v","push the value of v"],
    ["LoadVar pivot","push the value of pivot"],
    ["2-ary <","pop 2 values and push the result of applying <"],
    ["JumpCond False 139","pop a value and jump to 139 if the value is False"],
    ["LoadVar $accu103","load accumulator: push the value of $accu103"],
    ["DelVar $accu103","delete method variable $accu103"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu103","update accumulator: pop a value and store in $accu103"],
    ["Jump 139","set program counter to 139"],
    ["DelVar v","delete method variable v"],
    ["LoadVar $accu103","load final accumulator result: push the value of $accu103"],
    ["DelVar $accu103","delete method variable $accu103"],
    ["StoreVar lower","pop a value and store in lower"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu120","initialize accumulator for list comprehension: pop a value and store in $accu120"],
    ["LoadVar rest","push the value of rest"],
    ["DelVar rest","delete method variable rest"],
    ["Push 0","push constant 0"],
    ["DelVar v","delete method variable v"],
    ["Cut(v)","get next element and assign to v; push False or True depending on success"],
    ["JumpCond False 176","check if loop is done: pop a value and jump to 176 if the value is False"],
    ["LoadVar v","push the value of v"],
    ["LoadVar pivot","push the value of pivot"],
    ["2-ary >=","pop 2 values and push the result of applying >="],
    ["JumpCond False 162","pop a value and jump to 162 if the value is False"],
    ["LoadVar $accu120","load accumulator: push the value of $accu120"],
    ["DelVar $accu120","delete method variable $accu120"],
    ["LoadVar v","push the value of v"],
    ["DelVar v","delete method variable v"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu120","update accumulator: pop a value and store in $accu120"],
    ["Jump 162","set program counter to 162"],
    ["DelVar v","delete method variable v"],
    ["LoadVar $accu120","load final accumulator result: push the value of $accu120"],
    ["DelVar $accu120","delete method variable $accu120"],
    ["StoreVar higher","pop a value and store in higher"],
    ["LoadVar lower","push the value of lower"],
    ["DelVar lower","delete method variable lower"],
    ["Apply PC(117)","call method PC(117)"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar pivot","push the value of pivot"],
    ["DelVar pivot","delete method variable pivot"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar higher","push the value of higher"],
    ["DelVar higher","delete method variable higher"],
    ["Apply PC(117)","call method PC(117)"],
    ["3-ary +","pop 3 values and push the result of applying +"],
    ["StoreVar sorted_list","pop a value and store in sorted_list"],
    ["ReturnOp(sorted_list)","restore caller method state and push sorted_list"],
    ["DelVar sorted_list","delete method variable sorted_list"],
    ["Jump 429","jump over method definition: set program counter to 429"],
    ["Frame index(d, e)","start of method index"],
    ["Push 0","push constant 0"],
    ["StoreVar i","pop a value and store in i"],
    ["LoadVar d","push the value of d"],
    ["LoadVar i","push the value of i"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["LoadVar e","push the value of e"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["JumpCond False 211","pop a value and jump to 211 if the value is False"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["Push 1","push constant 1"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar i","pop a value and store in i"],
    ["Jump 198","set program counter to 198"],
    ["DelVar d","delete method variable d"],
    ["DelVar e","delete method variable e"],
    ["ReturnOp(i)","restore caller method state and push i"],
    ["DelVar i","delete method variable i"],
    ["Jump 429","jump over method definition: set program counter to 429"],
    ["Frame startswith(d, prefix)","start of method startswith"],
    ["DelVar result","delete method variable result"],
    ["LoadVar prefix","push the value of prefix"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["LoadVar d","push the value of d"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["2-ary <=","pop 2 values and push the result of applying <="],
    ["JumpCond False 257","pop a value and jump to 257 if the value is False"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu172","initialize accumulator for list comprehension: pop a value and store in $accu172"],
    ["Push 0","push constant 0"],
    ["LoadVar prefix","push the value of prefix"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["Push 1","push constant 1"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["2-ary ..","pop 2 values and push the result of applying .."],
    ["Push 0","push constant 0"],
    ["Cut(i)","get next element and assign to i; push False or True depending on success"],
    ["JumpCond False 250","check if loop is done: pop a value and jump to 250 if the value is False"],
    ["LoadVar $accu172","load accumulator: push the value of $accu172"],
    ["DelVar $accu172","delete method variable $accu172"],
    ["LoadVar d","push the value of d"],
    ["LoadVar i","push the value of i"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["LoadVar prefix","push the value of prefix"],
    ["LoadVar i","push the value of i"],
    ["DelVar i","delete method variable i"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu172","update accumulator: pop a value and store in $accu172"],
    ["Jump 233","set program counter to 233"],
    ["DelVar d","delete method variable d"],
    ["DelVar i","delete method variable i"],
    ["DelVar prefix","delete method variable prefix"],
    ["LoadVar $accu172","load final accumulator result: push the value of $accu172"],
    ["DelVar $accu172","delete method variable $accu172"],
    ["1-ary all","pop 1 value and push the result of applying all"],
    ["Jump 260","set program counter to 260"],
    ["DelVar d","delete method variable d"],
    ["DelVar prefix","delete method variable prefix"],
    ["Push False","push constant False"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 429","jump over method definition: set program counter to 429"],
    ["Frame foldl(d, f, z)","start of method foldl"],
    ["DelVar result","delete method variable result"],
    ["LoadVar z","push the value of z"],
    ["DelVar z","delete method variable z"],
    ["StoreVar result","pop a value and store in result"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["Push 0","push constant 0"],
    ["Cut(e)","get next element and assign to e; push False or True depending on success"],
    ["JumpCond False 285","check if loop is done: pop a value and jump to 285 if the value is False"],
    ["LoadVar f","push the value of f"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar result","push the value of result"],
    ["DelVar result","delete method variable result"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["Jump 271","set program counter to 271"],
    ["DelVar e","delete method variable e"],
    ["DelVar f","delete method variable f"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 429","jump over method definition: set program counter to 429"],
    ["Frame foldr(d, f, z)","start of method foldr"],
    ["DelVar result","delete method variable result"],
    ["LoadVar d","push the value of d"],
    ["1-ary len","pop 1 value and push the result of applying len"],
    ["Push 0","push constant 0"],
    ["2-ary ==","pop 2 values and push the result of applying =="],
    ["JumpCond False 301","pop a value and jump to 301 if the value is False"],
    ["DelVar d","delete method variable d"],
    ["DelVar f","delete method variable f"],
    ["LoadVar z","push the value of z"],
    ["DelVar z","delete method variable z"],
    ["Jump 323","set program counter to 323"],
    ["LoadVar f","push the value of f"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar d","push the value of d"],
    ["Push 0","push constant 0"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["Apply PC(55)","call method PC(55)"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar f","push the value of f"],
    ["DelVar f","delete method variable f"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar z","push the value of z"],
    ["DelVar z","delete method variable z"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(289)","call method PC(289)"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 429","jump over method definition: set program counter to 429"],
    ["Frame reduce(f, d, z)","start of method reduce"],
    ["DelVar result","delete method variable result"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar d","push the value of d"],
    ["DelVar d","delete method variable d"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar f","push the value of f"],
    ["DelVar f","delete method variable f"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["LoadVar z","push the value of z"],
    ["DelVar z","delete method variable z"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Apply PC(263)","call method PC(263)"],
    ["StoreVar result","pop a value and store in result"],
    ["ReturnOp(result)","restore caller method state and push result"],
    ["Jump 429","jump over method definition: set program counter to 429"],
    ["Frame permuted(s)","start of method permuted"],
    ["Push ()","push constant ()"],
    ["StoreVar perm","pop a value and store in perm"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["StoreVar c","pop a value and store in c"],
    ["LoadVar c","push the value of c"],
    ["Push {}","push constant {}"],
    ["2-ary !=","pop 2 values and push the result of applying !="],
    ["JumpCond False 371","pop a value and jump to 371 if the value is False"],
    ["LoadVar c","push the value of c"],
    ["Choose","pop a set value and push one of its elements"],
    ["StoreVar e","pop a value and store in e"],
    ["LoadVar perm","push the value of perm"],
    ["DelVar perm","delete method variable perm"],
    ["Push ()","building a tuple: push constant ()"],
    ["LoadVar e","push the value of e"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["StoreVar perm","pop a value and store in perm"],
    ["LoadVar c","push the value of c"],
    ["DelVar c","delete method variable c"],
    ["Push {}","push constant {}"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["2-ary SetAdd","pop 2 values and push the result of applying SetAdd"],
    ["2-ary -","pop 2 values and push the result of applying -"],
    ["StoreVar c","pop a value and store in c"],
    ["Jump 348","set program counter to 348"],
    ["DelVar c","delete method variable c"],
    ["ReturnOp(perm)","restore caller method state and push perm"],
    ["DelVar perm","delete method variable perm"],
    ["Jump 429","jump over method definition: set program counter to 429"],
    ["Frame filter(cond, s)","start of method filter"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu292","initialize accumulator for list comprehension: pop a value and store in $accu292"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push 0","push constant 0"],
    ["DelVar e","delete method variable e"],
    ["Cut(e)","get next element and assign to e; push False or True depending on success"],
    ["JumpCond False 396","check if loop is done: pop a value and jump to 396 if the value is False"],
    ["LoadVar cond","push the value of cond"],
    ["LoadVar e","push the value of e"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["JumpCond False 381","pop a value and jump to 381 if the value is False"],
    ["LoadVar $accu292","load accumulator: push the value of $accu292"],
    ["DelVar $accu292","delete method variable $accu292"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu292","update accumulator: pop a value and store in $accu292"],
    ["Jump 381","set program counter to 381"],
    ["DelVar cond","delete method variable cond"],
    ["DelVar e","delete method variable e"],
    ["LoadVar $accu292","load final accumulator result: push the value of $accu292"],
    ["DelVar $accu292","delete method variable $accu292"],
    ["StoreVar t","pop a value and store in t"],
    ["ReturnOp(t)","restore caller method state and push t"],
    ["DelVar t","delete method variable t"],
    ["Jump 429","jump over method definition: set program counter to 429"],
    ["Frame map(f, s)","start of method map"],
    ["Push ()","initialize accumulator for list comprehension: push constant ()"],
    ["StoreVar $accu313","initialize accumulator for list comprehension: pop a value and store in $accu313"],
    ["LoadVar s","push the value of s"],
    ["DelVar s","delete method variable s"],
    ["Push 0","push constant 0"],
    ["Cut(e)","get next element and assign to e; push False or True depending on success"],
    ["JumpCond False 422","check if loop is done: pop a value and jump to 422 if the value is False"],
    ["LoadVar $accu313","load accumulator: push the value of $accu313"],
    ["DelVar $accu313","delete method variable $accu313"],
    ["LoadVar f","push the value of f"],
    ["LoadVar e","push the value of e"],
    ["DelVar e","delete method variable e"],
    ["2-ary Closure","pop 2 values and push the result of applying Closure"],
    ["Load","pop an address and push the value at the address"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["StoreVar $accu313","update accumulator: pop a value and store in $accu313"],
    ["Jump 410","set program counter to 410"],
    ["DelVar e","delete method variable e"],
    ["DelVar f","delete method variable f"],
    ["LoadVar $accu313","load final accumulator result: push the value of $accu313"],
    ["DelVar $accu313","delete method variable $accu313"],
    ["StoreVar t","pop a value and store in t"],
    ["ReturnOp(t)","restore caller method state and push t"],
    ["DelVar t","delete method variable t"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push 1","push constant 1"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push 2","push constant 2"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Push 3","push constant 3"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Store d","pop a value and store it in shared variable d"],
    ["Push ()","building a tuple: push constant ()"],
    ["Push 4","push constant 4"],
    ["2-ary ListAdd","pop 2 values and push the result of applying ListAdd"],
    ["Load d","push value of shared variable d"],
    ["2-ary +","pop 2 values and push the result of applying +"],
    ["Store d","pop a value and store it in shared variable d"],
    ["Load d","push value of shared variable d"],
    ["Print","pop a value and add to print history"],
    ["ReturnOp(result. None)","restore caller method state and push result"],
    ["DelVar result","delete method variable result"]
  ],
  "locs": [
    { "module": "__main__", "line": 1, "column": 1, "endline": 21, "endcolumn": 1, "stmt": [1,1,21,1] },
    { "module": "lists", "line": 2, "column": 1, "endline": 2, "endcolumn": 3, "stmt": [2,1,2,35] },
    { "module": "lists", "line": 2, "column": 1, "endline": 2, "endcolumn": 35, "stmt": [2,1,2,35] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 31, "endline": 3, "endcolumn": 31, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 31, "endline": 3, "endcolumn": 31, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 34, "endline": 3, "endcolumn": 34, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 34, "endline": 3, "endcolumn": 34, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 36, "endline": 3, "endcolumn": 36, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 34, "endline": 3, "endcolumn": 36, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 31, "endline": 3, "endcolumn": 36, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 16, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 16, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 16, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 16, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 18, "endline": 3, "endcolumn": 18, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 18, "endline": 3, "endcolumn": 18, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 19, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 19, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 37, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 16, "endline": 3, "endcolumn": 37, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 3, "column": 5, "endline": 3, "endcolumn": 12, "stmt": [3,5,3,39] },
    { "module": "lists", "line": 4, "column": 1, "endline": 4, "endcolumn": 6, "stmt": [4,1,4,6] },
    { "module": "lists", "line": 5, "column": 1, "endline": 5, "endcolumn": 3, "stmt": [5,1,5,32] },
    { "module": "lists", "line": 5, "column": 1, "endline": 5, "endcolumn": 32, "stmt": [5,1,5,32] },
    { "module": "lists", "line": 6, "column": 14, "endline": 6, "endcolumn": 14, "stmt": [6,5,6,21] },
    { "module": "lists", "line": 6, "column": 14, "endline": 6, "endcolumn": 14, "stmt": [6,5,6,21] },
    { "module": "lists", "line": 6, "column": 14, "endline": 6, "endcolumn": 14, "stmt": [6,5,6,21] },
    { "module": "lists", "line": 6, "column": 19, "endline": 6, "endcolumn": 20, "stmt": [6,5,6,21] },
    { "module": "lists", "line": 6, "column": 19, "endline": 6, "endcolumn": 19, "stmt": [6,5,6,21] },
    { "module": "lists", "line": 6, "column": 19, "endline": 6, "endcolumn": 19, "stmt": [6,5,6,21] },
    { "module": "lists", "line": 6, "column": 19, "endline": 6, "endcolumn": 20, "stmt": [6,5,6,21] },
    { "module": "lists", "line": 6, "column": 14, "endline": 6, "endcolumn": 20, "stmt": [6,5,6,21] },
    { "module": "lists", "line": 6, "column": 5, "endline": 6, "endcolumn": 12, "stmt": [6,5,6,21] },
    { "module": "lists", "line": 7, "column": 1, "endline": 7, "endcolumn": 6, "stmt": [7,1,7,6] },
    { "module": "lists", "line": 8, "column": 1, "endline": 8, "endcolumn": 3, "stmt": [8,1,8,27] },
    { "module": "lists", "line": 8, "column": 1, "endline": 8, "endcolumn": 27, "stmt": [8,1,8,27] },
    { "module": "lists", "line": 9, "column": 14, "endline": 9, "endcolumn": 14, "stmt": [9,5,9,17] },
    { "module": "lists", "line": 9, "column": 14, "endline": 9, "endcolumn": 14, "stmt": [9,5,9,17] },
    { "module": "lists", "line": 9, "column": 14, "endline": 9, "endcolumn": 14, "stmt": [9,5,9,17] },
    { "module": "lists", "line": 9, "column": 16, "endline": 9, "endcolumn": 16, "stmt": [9,5,9,17] },
    { "module": "lists", "line": 9, "column": 14, "endline": 9, "endcolumn": 17, "stmt": [9,5,9,17] },
    { "module": "lists", "line": 9, "column": 14, "endline": 9, "endcolumn": 17, "stmt": [9,5,9,17] },
    { "module": "lists", "line": 9, "column": 5, "endline": 9, "endcolumn": 12, "stmt": [9,5,9,17] },
    { "module": "lists", "line": 10, "column": 1, "endline": 10, "endcolumn": 6, "stmt": [10,1,10,6] },
    { "module": "lists", "line": 11, "column": 1, "endline": 11, "endcolumn": 3, "stmt": [11,1,11,27] },
    { "module": "lists", "line": 11, "column": 1, "endline": 11, "endcolumn": 27, "stmt": [11,1,11,27] },
    { "module": "lists", "line": 12, "column": 14, "endline": 12, "endcolumn": 14, "stmt": [12,5,12,14] },
    { "module": "lists", "line": 12, "column": 14, "endline": 12, "endcolumn": 14, "stmt": [12,5,12,14] },
    { "module": "lists", "line": 12, "column": 14, "endline": 12, "endcolumn": 14, "stmt": [12,5,12,14] },
    { "module": "lists", "line": 12, "column": 5, "endline": 12, "endcolumn": 12, "stmt": [12,5,12,14] },
    { "module": "lists", "line": 13, "column": 9, "endline": 13, "endcolumn": 14, "stmt": [13,5,13,17] },
    { "module": "lists", "line": 13, "column": 16, "endline": 13, "endcolumn": 16, "stmt": [13,5,13,17] },
    { "module": "lists", "line": 13, "column": 9, "endline": 13, "endcolumn": 17, "stmt": [13,5,13,17] },
    { "module": "lists", "line": 13, "column": 5, "endline": 13, "endcolumn": 17, "stmt": [13,5,13,17] },
    { "module": "lists", "line": 15, "column": 45, "endline": 15, "endcolumn": 50, "stmt": [15,45,15,50] },
    { "module": "lists", "line": 16, "column": 1, "endline": 16, "endcolumn": 3, "stmt": [16,1,16,29] },
    { "module": "lists", "line": 16, "column": 1, "endline": 16, "endcolumn": 29, "stmt": [16,1,16,29] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 29, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 29, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 16, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 16, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 16, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 16, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 16, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 16, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 29, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 16, "endline": 17, "endcolumn": 29, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 17, "column": 5, "endline": 17, "endcolumn": 12, "stmt": [17,5,17,31] },
    { "module": "lists", "line": 19, "column": 23, "endline": 19, "endcolumn": 28, "stmt": [19,23,19,28] },
    { "module": "lists", "line": 20, "column": 1, "endline": 20, "endcolumn": 3, "stmt": [20,1,20,28] },
    { "module": "lists", "line": 20, "column": 1, "endline": 20, "endcolumn": 28, "stmt": [20,1,20,28] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 34, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 34, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 16, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 16, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 16, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 17, "endline": 21, "endcolumn": 20, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 17, "endline": 21, "endcolumn": 17, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 17, "endline": 21, "endcolumn": 17, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 17, "endline": 21, "endcolumn": 20, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 20, "endline": 21, "endcolumn": 20, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 20, "endline": 21, "endcolumn": 20, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 17, "endline": 21, "endcolumn": 20, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 34, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 16, "endline": 21, "endcolumn": 34, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 21, "column": 5, "endline": 21, "endcolumn": 12, "stmt": [21,5,21,36] },
    { "module": "lists", "line": 23, "column": 22, "endline": 23, "endcolumn": 27, "stmt": [23,22,23,27] },
    { "module": "lists", "line": 24, "column": 1, "endline": 24, "endcolumn": 3, "stmt": [24,1,24,33] },
    { "module": "lists", "line": 24, "column": 1, "endline": 24, "endcolumn": 33, "stmt": [24,1,24,33] },
    { "module": "lists", "line": 25, "column": 8, "endline": 25, "endcolumn": 8, "stmt": [25,5,25,15] },
    { "module": "lists", "line": 25, "column": 13, "endline": 25, "endcolumn": 14, "stmt": [25,5,25,15] },
    { "module": "lists", "line": 25, "column": 8, "endline": 25, "endcolumn": 14, "stmt": [25,5,25,15] },
    { "module": "lists", "line": 25, "column": 5, "endline": 25, "endcolumn": 6, "stmt": [25,5,25,15] },
    { "module": "lists", "line": 26, "column": 23, "endline": 26, "endcolumn": 24, "stmt": [26,9,26,24] },
    { "module": "lists", "line": 26, "column": 23, "endline": 26, "endcolumn": 24, "stmt": [26,9,26,24] },
    { "module": "lists", "line": 26, "column": 9, "endline": 26, "endcolumn": 21, "stmt": [26,9,26,24] },
    { "module": "lists", "line": 25, "column": 5, "endline": 25, "endcolumn": 15, "stmt": [25,5,25,15] },
    { "module": "lists", "line": 28, "column": 29, "endline": 28, "endcolumn": 44, "stmt": [28,9,28,53] },
    { "module": "lists", "line": 28, "column": 34, "endline": 28, "endcolumn": 34, "stmt": [28,9,28,53] },
    { "module": "lists", "line": 28, "column": 29, "endline": 28, "endcolumn": 35, "stmt": [28,9,28,53] },
    { "module": "lists", "line": 28, "column": 29, "endline": 28, "endcolumn": 44, "stmt": [28,9,28,53] },
    { "module": "lists", "line": 28, "column": 43, "endline": 28, "endcolumn": 43, "stmt": [28,9,28,53] },
    { "module": "lists", "line": 28, "column": 43, "endline": 28, "endcolumn": 43, "stmt": [28,9,28,53] },
    { "module": "lists", "line": 28, "column": 38, "endline": 28, "endcolumn": 44, "stmt": [28,9,28,53] },
    { "module": "lists", "line": 28, "column": 29, "endline": 28, "endcolumn": 44, "stmt": [28,9,28,53] },
    { "module": "lists", "line": 28, "column": 9, "endline": 28, "endcolumn": 27, "stmt": [28,9,28,53] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 34, "endline": 29, "endcolumn": 37, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 23, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 23, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 23, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 23, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 45, "endline": 29, "endcolumn": 45, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 49, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 45, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 23, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 23, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 49, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 23, "endline": 29, "endcolumn": 53, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 29, "column": 9, "endline": 29, "endcolumn": 19, "stmt": [29,9,29,64] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 35, "endline": 30, "endcolumn": 38, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 35, "endline": 30, "endcolumn": 38, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 24, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 24, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 24, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 24, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 46, "endline": 30, "endcolumn": 46, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 51, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 46, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 24, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 24, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 51, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 24, "endline": 30, "endcolumn": 55, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 30, "column": 9, "endline": 30, "endcolumn": 20, "stmt": [30,9,30,57] },
    { "module": "lists", "line": 31, "column": 33, "endline": 31, "endcolumn": 37, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 31, "column": 33, "endline": 31, "endcolumn": 37, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 31, "column": 27, "endline": 31, "endcolumn": 38, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 31, "column": 43, "endline": 31, "endcolumn": 48, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 31, "column": 43, "endline": 31, "endcolumn": 47, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 31, "column": 43, "endline": 31, "endcolumn": 47, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 31, "column": 43, "endline": 31, "endcolumn": 48, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 31, "column": 59, "endline": 31, "endcolumn": 64, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 31, "column": 59, "endline": 31, "endcolumn": 64, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 31, "column": 53, "endline": 31, "endcolumn": 65, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 31, "column": 27, "endline": 31, "endcolumn": 65, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 31, "column": 13, "endline": 31, "endcolumn": 25, "stmt": [31,13,31,65] },
    { "module": "lists", "line": 33, "column": 22, "endline": 33, "endcolumn": 27, "stmt": [33,22,33,27] },
    { "module": "lists", "line": 33, "column": 22, "endline": 33, "endcolumn": 27, "stmt": [33,22,33,27] },
    { "module": "lists", "line": 34, "column": 1, "endline": 34, "endcolumn": 3, "stmt": [34,1,34,26] },
    { "module": "lists", "line": 34, "column": 1, "endline": 34, "endcolumn": 26, "stmt": [34,1,34,26] },
    { "module": "lists", "line": 35, "column": 9, "endline": 35, "endcolumn": 9, "stmt": [35,5,35,9] },
    { "module": "lists", "line": 35, "column": 5, "endline": 35, "endcolumn": 7, "stmt": [35,5,35,9] },
    { "module": "lists", "line": 36, "column": 11, "endline": 36, "endcolumn": 11, "stmt": [36,5,36,20] },
    { "module": "lists", "line": 36, "column": 13, "endline": 36, "endcolumn": 13, "stmt": [36,5,36,20] },
    { "module": "lists", "line": 36, "column": 11, "endline": 36, "endcolumn": 14, "stmt": [36,5,36,20] },
    { "module": "lists", "line": 36, "column": 11, "endline": 36, "endcolumn": 14, "stmt": [36,5,36,20] },
    { "module": "lists", "line": 36, "column": 19, "endline": 36, "endcolumn": 19, "stmt": [36,5,36,20] },
    { "module": "lists", "line": 36, "column": 11, "endline": 36, "endcolumn": 19, "stmt": [36,5,36,20] },
    { "module": "lists", "line": 36, "column": 5, "endline": 36, "endcolumn": 9, "stmt": [36,5,36,20] },
    { "module": "lists", "line": 37, "column": 9, "endline": 37, "endcolumn": 14, "stmt": [37,9,37,14] },
    { "module": "lists", "line": 37, "column": 9, "endline": 37, "endcolumn": 14, "stmt": [37,9,37,14] },
    { "module": "lists", "line": 37, "column": 14, "endline": 37, "endcolumn": 14, "stmt": [37,9,37,14] },
    { "module": "lists", "line": 37, "column": 9, "endline": 37, "endcolumn": 14, "stmt": [37,9,37,14] },
    { "module": "lists", "line": 37, "column": 9, "endline": 37, "endcolumn": 12, "stmt": [37,9,37,14] },
    { "module": "lists", "line": 36, "column": 5, "endline": 36, "endcolumn": 20, "stmt": [36,5,36,20] },
    { "module": "lists", "line": 39, "column": 52, "endline": 39, "endcolumn": 57, "stmt": [39,52,39,57] },
    { "module": "lists", "line": 39, "column": 52, "endline": 39, "endcolumn": 57, "stmt": [39,52,39,57] },
    { "module": "lists", "line": 39, "column": 52, "endline": 39, "endcolumn": 57, "stmt": [39,52,39,57] },
    { "module": "lists", "line": 39, "column": 52, "endline": 39, "endcolumn": 57, "stmt": [39,52,39,57] },
    { "module": "lists", "line": 40, "column": 1, "endline": 40, "endcolumn": 3, "stmt": [40,1,40,41] },
    { "module": "lists", "line": 40, "column": 1, "endline": 40, "endcolumn": 41, "stmt": [40,1,40,41] },
    { "module": "lists", "line": 41, "column": 19, "endline": 41, "endcolumn": 24, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 19, "endline": 41, "endcolumn": 24, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 15, "endline": 41, "endcolumn": 25, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 34, "endline": 41, "endcolumn": 34, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 30, "endline": 41, "endcolumn": 35, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 15, "endline": 41, "endcolumn": 35, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 15, "endline": 41, "endcolumn": 97, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 75, "endline": 41, "endcolumn": 75, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 84, "endline": 41, "endcolumn": 89, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 80, "endline": 41, "endcolumn": 90, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 94, "endline": 41, "endcolumn": 94, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 80, "endline": 41, "endcolumn": 94, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 75, "endline": 41, "endcolumn": 94, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 46, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 46, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 46, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 46, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 48, "endline": 41, "endcolumn": 48, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 49, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 49, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 54, "endline": 41, "endcolumn": 59, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 61, "endline": 41, "endcolumn": 61, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 61, "endline": 41, "endcolumn": 61, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 54, "endline": 41, "endcolumn": 62, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 54, "endline": 41, "endcolumn": 62, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 62, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 96, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 46, "endline": 41, "endcolumn": 96, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 42, "endline": 41, "endcolumn": 97, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 38, "endline": 41, "endcolumn": 40, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 15, "endline": 41, "endcolumn": 97, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 15, "endline": 41, "endcolumn": 97, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 15, "endline": 41, "endcolumn": 97, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 41, "column": 5, "endline": 41, "endcolumn": 12, "stmt": [41,5,41,97] },
    { "module": "lists", "line": 43, "column": 55, "endline": 43, "endcolumn": 60, "stmt": [43,55,43,60] },
    { "module": "lists", "line": 44, "column": 1, "endline": 44, "endcolumn": 3, "stmt": [44,1,44,34] },
    { "module": "lists", "line": 44, "column": 1, "endline": 44, "endcolumn": 34, "stmt": [44,1,44,34] },
    { "module": "lists", "line": 45, "column": 14, "endline": 45, "endcolumn": 14, "stmt": [45,5,45,14] },
    { "module": "lists", "line": 45, "column": 14, "endline": 45, "endcolumn": 14, "stmt": [45,5,45,14] },
    { "module": "lists", "line": 45, "column": 14, "endline": 45, "endcolumn": 14, "stmt": [45,5,45,14] },
    { "module": "lists", "line": 45, "column": 5, "endline": 45, "endcolumn": 12, "stmt": [45,5,45,14] },
    { "module": "lists", "line": 46, "column": 14, "endline": 46, "endcolumn": 14, "stmt": [46,5,46,14] },
    { "module": "lists", "line": 46, "column": 14, "endline": 46, "endcolumn": 14, "stmt": [46,5,46,14] },
    { "module": "lists", "line": 46, "column": 5, "endline": 46, "endcolumn": 7, "stmt": [46,5,46,14] },
    { "module": "lists", "line": 46, "column": 5, "endline": 46, "endcolumn": 7, "stmt": [46,5,46,14] },
    { "module": "lists", "line": 46, "column": 5, "endline": 46, "endcolumn": 7, "stmt": [46,5,46,14] },
    { "module": "lists", "line": 47, "column": 18, "endline": 47, "endcolumn": 18, "stmt": [47,9,47,29] },
    { "module": "lists", "line": 47, "column": 20, "endline": 47, "endcolumn": 28, "stmt": [47,9,47,29] },
    { "module": "lists", "line": 47, "column": 20, "endline": 47, "endcolumn": 25, "stmt": [47,9,47,29] },
    { "module": "lists", "line": 47, "column": 20, "endline": 47, "endcolumn": 25, "stmt": [47,9,47,29] },
    { "module": "lists", "line": 47, "column": 20, "endline": 47, "endcolumn": 28, "stmt": [47,9,47,29] },
    { "module": "lists", "line": 47, "column": 28, "endline": 47, "endcolumn": 28, "stmt": [47,9,47,29] },
    { "module": "lists", "line": 47, "column": 28, "endline": 47, "endcolumn": 28, "stmt": [47,9,47,29] },
    { "module": "lists", "line": 47, "column": 20, "endline": 47, "endcolumn": 28, "stmt": [47,9,47,29] },
    { "module": "lists", "line": 47, "column": 18, "endline": 47, "endcolumn": 29, "stmt": [47,9,47,29] },
    { "module": "lists", "line": 47, "column": 18, "endline": 47, "endcolumn": 29, "stmt": [47,9,47,29] },
    { "module": "lists", "line": 47, "column": 9, "endline": 47, "endcolumn": 16, "stmt": [47,9,47,29] },
    { "module": "lists", "line": 46, "column": 14, "endline": 46, "endcolumn": 14, "stmt": [46,5,46,14] },
    { "module": "lists", "line": 49, "column": 59, "endline": 49, "endcolumn": 64, "stmt": [49,59,49,64] },
    { "module": "lists", "line": 49, "column": 59, "endline": 49, "endcolumn": 64, "stmt": [49,59,49,64] },
    { "module": "lists", "line": 49, "column": 59, "endline": 49, "endcolumn": 64, "stmt": [49,59,49,64] },
    { "module": "lists", "line": 50, "column": 1, "endline": 50, "endcolumn": 3, "stmt": [50,1,50,34] },
    { "module": "lists", "line": 50, "column": 1, "endline": 50, "endcolumn": 34, "stmt": [50,1,50,34] },
    { "module": "lists", "line": 51, "column": 23, "endline": 51, "endcolumn": 23, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 23, "endline": 51, "endcolumn": 23, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 19, "endline": 51, "endcolumn": 23, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 28, "endline": 51, "endcolumn": 28, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 19, "endline": 51, "endcolumn": 28, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 14, "endline": 51, "endcolumn": 63, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 14, "endline": 51, "endcolumn": 14, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 14, "endline": 51, "endcolumn": 14, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 14, "endline": 51, "endcolumn": 14, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 14, "endline": 51, "endcolumn": 14, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 16, "endline": 51, "endcolumn": 17, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 35, "endline": 51, "endcolumn": 35, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 37, "endline": 51, "endcolumn": 62, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 37, "endline": 51, "endcolumn": 37, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 39, "endline": 51, "endcolumn": 39, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 37, "endline": 51, "endcolumn": 40, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 37, "endline": 51, "endcolumn": 40, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 37, "endline": 51, "endcolumn": 62, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 49, "endline": 51, "endcolumn": 61, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 54, "endline": 51, "endcolumn": 54, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 54, "endline": 51, "endcolumn": 54, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 49, "endline": 51, "endcolumn": 55, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 49, "endline": 51, "endcolumn": 61, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 58, "endline": 51, "endcolumn": 58, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 58, "endline": 51, "endcolumn": 58, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 49, "endline": 51, "endcolumn": 61, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 61, "endline": 51, "endcolumn": 61, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 61, "endline": 51, "endcolumn": 61, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 49, "endline": 51, "endcolumn": 61, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 43, "endline": 51, "endcolumn": 62, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 37, "endline": 51, "endcolumn": 62, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 35, "endline": 51, "endcolumn": 63, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 35, "endline": 51, "endcolumn": 63, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 51, "column": 5, "endline": 51, "endcolumn": 12, "stmt": [51,5,51,63] },
    { "module": "lists", "line": 53, "column": 35, "endline": 53, "endcolumn": 40, "stmt": [53,35,53,40] },
    { "module": "lists", "line": 54, "column": 1, "endline": 54, "endcolumn": 3, "stmt": [54,1,54,35] },
    { "module": "lists", "line": 54, "column": 1, "endline": 54, "endcolumn": 35, "stmt": [54,1,54,35] },
    { "module": "lists", "line": 55, "column": 20, "endline": 55, "endcolumn": 26, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 20, "endline": 55, "endcolumn": 26, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 20, "endline": 55, "endcolumn": 20, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 20, "endline": 55, "endcolumn": 20, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 20, "endline": 55, "endcolumn": 26, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 23, "endline": 55, "endcolumn": 23, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 23, "endline": 55, "endcolumn": 23, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 20, "endline": 55, "endcolumn": 26, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 26, "endline": 55, "endcolumn": 26, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 26, "endline": 55, "endcolumn": 26, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 20, "endline": 55, "endcolumn": 26, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 14, "endline": 55, "endcolumn": 27, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 55, "column": 5, "endline": 55, "endcolumn": 12, "stmt": [55,5,55,27] },
    { "module": "lists", "line": 57, "column": 32, "endline": 57, "endcolumn": 37, "stmt": [57,32,57,37] },
    { "module": "lists", "line": 58, "column": 1, "endline": 58, "endcolumn": 3, "stmt": [58,1,58,29] },
    { "module": "lists", "line": 58, "column": 1, "endline": 58, "endcolumn": 29, "stmt": [58,1,58,29] },
    { "module": "lists", "line": 59, "column": 12, "endline": 59, "endcolumn": 13, "stmt": [59,5,59,13] },
    { "module": "lists", "line": 59, "column": 5, "endline": 59, "endcolumn": 10, "stmt": [59,5,59,13] },
    { "module": "lists", "line": 60, "column": 13, "endline": 60, "endcolumn": 13, "stmt": [60,5,60,13] },
    { "module": "lists", "line": 60, "column": 13, "endline": 60, "endcolumn": 13, "stmt": [60,5,60,13] },
    { "module": "lists", "line": 60, "column": 5, "endline": 60, "endcolumn": 13, "stmt": [60,5,60,13] },
    { "module": "lists", "line": 61, "column": 11, "endline": 61, "endcolumn": 11, "stmt": [61,5,61,18] },
    { "module": "lists", "line": 61, "column": 16, "endline": 61, "endcolumn": 17, "stmt": [61,5,61,18] },
    { "module": "lists", "line": 61, "column": 11, "endline": 61, "endcolumn": 17, "stmt": [61,5,61,18] },
    { "module": "lists", "line": 61, "column": 5, "endline": 61, "endcolumn": 9, "stmt": [61,5,61,18] },
    { "module": "lists", "line": 62, "column": 24, "endline": 62, "endcolumn": 24, "stmt": [62,9,62,24] },
    { "module": "lists", "line": 62, "column": 17, "endline": 62, "endcolumn": 24, "stmt": [62,9,62,24] },
    { "module": "lists", "line": 62, "column": 9, "endline": 62, "endcolumn": 15, "stmt": [62,9,62,24] },
    { "module": "lists", "line": 63, "column": 13, "endline": 63, "endcolumn": 26, "stmt": [63,13,63,26] },
    { "module": "lists", "line": 63, "column": 13, "endline": 63, "endcolumn": 26, "stmt": [63,13,63,26] },
    { "module": "lists", "line": 63, "column": 23, "endline": 63, "endcolumn": 24, "stmt": [63,13,63,26] },
    { "module": "lists", "line": 63, "column": 23, "endline": 63, "endcolumn": 23, "stmt": [63,13,63,26] },
    { "module": "lists", "line": 63, "column": 23, "endline": 63, "endcolumn": 24, "stmt": [63,13,63,26] },
    { "module": "lists", "line": 63, "column": 13, "endline": 63, "endcolumn": 26, "stmt": [63,13,63,26] },
    { "module": "lists", "line": 63, "column": 13, "endline": 63, "endcolumn": 19, "stmt": [63,13,63,26] },
    { "module": "lists", "line": 64, "column": 13, "endline": 64, "endcolumn": 22, "stmt": [64,13,64,22] },
    { "module": "lists", "line": 64, "column": 13, "endline": 64, "endcolumn": 22, "stmt": [64,13,64,22] },
    { "module": "lists", "line": 64, "column": 20, "endline": 64, "endcolumn": 20, "stmt": [64,13,64,22] },
    { "module": "lists", "line": 64, "column": 20, "endline": 64, "endcolumn": 20, "stmt": [64,13,64,22] },
    { "module": "lists", "line": 64, "column": 20, "endline": 64, "endcolumn": 20, "stmt": [64,13,64,22] },
    { "module": "lists", "line": 64, "column": 20, "endline": 64, "endcolumn": 20, "stmt": [64,13,64,22] },
    { "module": "lists", "line": 64, "column": 13, "endline": 64, "endcolumn": 22, "stmt": [64,13,64,22] },
    { "module": "lists", "line": 64, "column": 13, "endline": 64, "endcolumn": 16, "stmt": [64,13,64,22] },
    { "module": "lists", "line": 61, "column": 5, "endline": 61, "endcolumn": 18, "stmt": [61,5,61,18] },
    { "module": "lists", "line": 66, "column": 53, "endline": 66, "endcolumn": 58, "stmt": [66,53,66,58] },
    { "module": "lists", "line": 66, "column": 53, "endline": 66, "endcolumn": 58, "stmt": [66,53,66,58] },
    { "module": "lists", "line": 66, "column": 53, "endline": 66, "endcolumn": 58, "stmt": [66,53,66,58] },
    { "module": "lists", "line": 67, "column": 1, "endline": 67, "endcolumn": 3, "stmt": [67,1,67,30] },
    { "module": "lists", "line": 67, "column": 1, "endline": 67, "endcolumn": 30, "stmt": [67,1,67,30] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 22, "endline": 68, "endcolumn": 22, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 22, "endline": 68, "endcolumn": 22, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 11, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 11, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 11, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 11, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 30, "endline": 68, "endcolumn": 33, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 35, "endline": 68, "endcolumn": 35, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 30, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 30, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 11, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 11, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 36, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 11, "endline": 68, "endcolumn": 36, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 68, "column": 5, "endline": 68, "endcolumn": 7, "stmt": [68,5,68,38] },
    { "module": "lists", "line": 70, "column": 40, "endline": 70, "endcolumn": 45, "stmt": [70,40,70,45] },
    { "module": "lists", "line": 70, "column": 40, "endline": 70, "endcolumn": 45, "stmt": [70,40,70,45] },
    { "module": "lists", "line": 71, "column": 1, "endline": 71, "endcolumn": 3, "stmt": [71,1,71,24] },
    { "module": "lists", "line": 71, "column": 1, "endline": 71, "endcolumn": 24, "stmt": [71,1,71,24] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 25, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 25, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 11, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 11, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 11, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 11, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 13, "endline": 72, "endcolumn": 13, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 13, "endline": 72, "endcolumn": 13, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 14, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 14, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 25, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 11, "endline": 72, "endcolumn": 25, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 72, "column": 5, "endline": 72, "endcolumn": 7, "stmt": [72,5,72,27] },
    { "module": "lists", "line": 73, "column": 1, "endline": 73, "endcolumn": 6, "stmt": [73,1,73,6] },
    { "module": "lists", "line": 73, "column": 1, "endline": 73, "endcolumn": 6, "stmt": [73,1,73,6] },
    { "module": "__main__", "line": 15, "column": 6, "endline": 15, "endcolumn": 10, "stmt": [15,1,15,11] },
    { "module": "__main__", "line": 15, "column": 6, "endline": 15, "endcolumn": 6, "stmt": [15,1,15,11] },
    { "module": "__main__", "line": 15, "column": 6, "endline": 15, "endcolumn": 10, "stmt": [15,1,15,11] },
    { "module": "__main__", "line": 15, "column": 8, "endline": 15, "endcolumn": 8, "stmt": [15,1,15,11] },
    { "module": "__main__", "line": 15, "column": 6, "endline": 15, "endcolumn": 10, "stmt": [15,1,15,11] },
    { "module": "__main__", "line": 15, "column": 10, "endline": 15, "endcolumn": 10, "stmt": [15,1,15,11] },
    { "module": "__main__", "line": 15, "column": 6, "endline": 15, "endcolumn": 10, "stmt": [15,1,15,11] },
    { "module": "__main__", "line": 15, "column": 1, "endline": 15, "endcolumn": 3, "stmt": [15,1,15,11] },
    { "module": "__main__", "line": 17, "column": 6, "endline": 17, "endcolumn": 7, "stmt": [17,1,17,12] },
    { "module": "__main__", "line": 17, "column": 6, "endline": 17, "endcolumn": 6, "stmt": [17,1,17,12] },
    { "module": "__main__", "line": 17, "column": 6, "endline": 17, "endcolumn": 7, "stmt": [17,1,17,12] },
    { "module": "__main__", "line": 17, "column": 12, "endline": 17, "endcolumn": 12, "stmt": [17,1,17,12] },
    { "module": "__main__", "line": 17, "column": 6, "endline": 17, "endcolumn": 12, "stmt": [17,1,17,12] },
    { "module": "__main__", "line": 17, "column": 1, "endline": 17, "endcolumn": 3, "stmt": [17,1,17,12] },
    { "module": "__main__", "line": 19, "column": 7, "endline": 19, "endcolumn": 7, "stmt": [19,1,19,8] },
    { "module": "__main__", "line": 19, "column": 1, "endline": 19, "endcolumn": 8, "stmt": [19,1,19,8] },
    { "module": "__main__", "line": 21, "column": 1, "endline": 21, "endcolumn": 1, "stmt": [21,1,21,1] },
    { "module": "__main__", "line": 21, "column": 1, "endline": 21, "endcolumn": 1, "stmt": [21,1,21,1] }
  ]
}
